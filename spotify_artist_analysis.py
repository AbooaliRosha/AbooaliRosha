# -*- coding: utf-8 -*-
"""Spotify Artist Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_A_BHpBOvCii9rsZboJGcRr39P7xI9XX

This my first personal project
Disclaimer: These numbers are valid as of August 2023

## **Uploading and reading the file**
"""

#Uploading the csv file from local drive
from google.colab import files
uploaded = files.upload()

# Import portion of a package
import matplotlib.pyplot as plt  # Visualization package

# Import full packages under custom name
import numpy as np  # Common package for numerical methods
import pandas as pd  # Common package for data storeage/manipulation
import seaborn as sns  # Common package for statistical visualizations

# Import portion of a package
import scipy.stats as stats
from sklearn.impute import SimpleImputer as Imputer  # Specific function from common machine learning package

#reading the csv file
import io
df = pd.read_csv(io.BytesIO(uploaded['taylor_swift_spotify.csv']))
# Dataset is now stored in a Pandas Dataframe

"""# **Displaying the first 5 rows**"""

df.head()  # A method that prints the first 5 rows (by default) of a df

"""# **Dimension of the data frame**"""

print("The dimension of the dataframe is",df.shape)

"""## **Checking for null values**"""

#count the number of missing values

print(df.isnull().values.sum())

"""There is no missing values thus there is no need to adjust the data

# **Data types of each column**
"""

df.dtypes #getting the name of each column and its type

"""# **Organizing categorical and numerical features**"""

# List of column headings
df_columns = ["Unnamed","name","album","release_date","track_number","id","uri","acousticness","danceability","energy","instrumentalness","liveness","loudness","speechiness","tempo","valence","popularity","duration_ms"]

df.columns = df_columns  # Set column headings
# (a) Make a list of column names in desired order
columns_sorted = df_columns[:1] + df_columns[4:5] + df_columns[7:] + df_columns[1:4] + df_columns[5:7]
# (b) Reorder the columns in the df DataFrame
df = df[columns_sorted]
# Print the resulting DataFrame
df.head()

"""Now it's clear that the numeric features are on the left hand side and the categorical on the right

# **Convert numerical data to floats**
"""

# Define lists to easily reference each type of data
num_cols = columns_sorted[:13]  # List of column headings with numerical data

# Convert the numerical data to floats
df[num_cols] = df[num_cols].apply(lambda x: x.astype(float))
df.dtypes

"""# **Top 5 most popular songs**"""

#Sort the table by top 5 most popular songs
top_5 = df.sort_values('popularity', ascending=False).head(5)

# Select the specific column, in this case name to display the names only
column_to_display = top_5['name']

#Reset the index numbers, it will start from 0 to 5
column_to_display.reset_index(drop=True)

#Start the index from 1 instead of 0
column_to_display.index = range(1, len(column_to_display) + 1)

#Display
column_to_display

"""# **Showing which albums the top 5 songs belong to using a pie chart**"""

# define Seaborn color palette to use
palette_color = sns.color_palette('bright')

# getting the album names
key = top_5.groupby('album').size()

# counting the number of each album that is in the top 5
result = top_5.groupby('album').size()

# turn the dataframe to a list
album_counts = result.tolist()
album_names = key.index.tolist()

# plotting data on chart
plt.pie(album_counts, labels= album_names, colors=palette_color, autopct='%.0f%%')

# displaying chart
plt.show()

"""# **Bottom 5 songs and the album they belong to**"""

bottom_5 = df.sort_values('popularity', ascending=True).head(5)

# Assuming the correct column names are 'name' and 'Album' (without leading/trailing spaces)
col_to_display = bottom_5[['name', 'album']]

# Reset the index numbers and start the index from 1
col_to_display.index = range(1, len(col_to_display) + 1)

# Display
col_to_display

"""# **Diplaying the folklore and evermore album tracks**"""

name_album = df[['name','album']] #this only shows the cols name and album

# make a new dataframe with folklore and evermore
df_new = name_album[(name_album['album'] == 'folklore') | (name_album['album'] == 'evermore')]

df_new # display

"""# **Danceability vs Popularity**

In this part I'm going to show the relation between danceability vs Popularity to see if danceability has any effect on the Popularity of a song
"""

correlation = df['danceability'].corr(df['popularity'])
print(f"Correlation between danceability and popularity: {correlation}")

plt.scatter(df['danceability'], df['popularity'])
plt.xlabel('Danceability')
plt.ylabel('Popularity')
plt.title('Scatter Plot of Danceability vs. Popularity')
plt.show()

"""A correlation coefficient of approximately 0.0565 is very close to 0. This suggests that there is almost no linear relationship between "danceability" and "popularity." In other words, the danceability of a song does not have a significant linear impact on its popularity."""